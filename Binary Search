def binary_search(data, item):
    low = 0  # first element in list | [-> 0, 1, 2, 3, 4, 5, 6 ]
    high = len(data) - 1  # last element in list | [ 0, 1, 2, 3, 4, 5, 6 <-]
    times = 0  # Attempts count
    while low <= high:
        times += 1
        mid = ((high + low) // 2)  # Medium element in list | [ 0, 1, 2, -> 3 <- , 4, 5, 6 ]
        guess = data[mid]  # Suggested result
        if guess == item:
            return str(guess) + " | " + str(times) + " attempts"
        if guess > item:
            high = mid - 1
        else:
            low = mid + 1
    return None


exp = [x for x in range(0, 100)]
anotherExp = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(binary_search(exp, 85))
print(binary_search(anotherExp, 6))
print(binary_search([1, 3, 5, 7, 9], 3))

"""
    First print: 85 | 6 attempts
    Second print: 6 | 4 attempts
    Third print: 3 | 3 attempts
"""


P.S.: In the book 7th string of code tells us that we should divide sum of "high" and "low" by 2, using "/" sign. But PyCharm 2021.1.3 (Community Edition)
finds an error, that in 8th string we can't use float number in list and therefore, we have to use "//" sign or use "int()" function to convert it.

P.S.2: In the book 10th string should return "mid" value instead of "guess" result. It will tell us that our result in the "mid" index of list, but in this option
we will return the item we passed in the function to find.
